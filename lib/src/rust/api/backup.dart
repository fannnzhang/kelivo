// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `finalize_response`, `local_name`, `sanitize_zip_path`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`

Future<Uint8List> createBackupZip({
  required List<BackupZipEntryInput> entries,
}) => RustLib.instance.api.crateApiBackupCreateBackupZip(entries: entries);

Future<List<BackupZipEntry>> extractBackupZip({required List<int> bytes}) =>
    RustLib.instance.api.crateApiBackupExtractBackupZip(bytes: bytes);

Future<List<WebDavEntry>> parseWebdavPropfind({
  required String xml,
  required String baseUrl,
}) => RustLib.instance.api.crateApiBackupParseWebdavPropfind(
  xml: xml,
  baseUrl: baseUrl,
);

class BackupZipEntry {
  final String path;
  final Uint8List data;
  final bool isDir;

  const BackupZipEntry({
    required this.path,
    required this.data,
    required this.isDir,
  });

  @override
  int get hashCode => path.hashCode ^ data.hashCode ^ isDir.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BackupZipEntry &&
          runtimeType == other.runtimeType &&
          path == other.path &&
          data == other.data &&
          isDir == other.isDir;
}

class BackupZipEntryInput {
  final String path;
  final Uint8List data;
  final bool isDir;

  const BackupZipEntryInput({
    required this.path,
    required this.data,
    required this.isDir,
  });

  @override
  int get hashCode => path.hashCode ^ data.hashCode ^ isDir.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is BackupZipEntryInput &&
          runtimeType == other.runtimeType &&
          path == other.path &&
          data == other.data &&
          isDir == other.isDir;
}

class WebDavEntry {
  final String href;
  final String displayName;
  final BigInt size;
  final String? lastModifiedRfc3339;
  final bool isDirectory;

  const WebDavEntry({
    required this.href,
    required this.displayName,
    required this.size,
    this.lastModifiedRfc3339,
    required this.isDirectory,
  });

  @override
  int get hashCode =>
      href.hashCode ^
      displayName.hashCode ^
      size.hashCode ^
      lastModifiedRfc3339.hashCode ^
      isDirectory.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is WebDavEntry &&
          runtimeType == other.runtimeType &&
          href == other.href &&
          displayName == other.displayName &&
          size == other.size &&
          lastModifiedRfc3339 == other.lastModifiedRfc3339 &&
          isDirectory == other.isDirectory;
}
